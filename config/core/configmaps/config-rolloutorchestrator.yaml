# Copyright 2023 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-rolloutorchestrator
  namespace: knative-serving
  labels:
    app.kubernetes.io/component: rolloutorchestrator
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: devel
data:
  _example: |
    # over-consumption-ratio sets the percentage about how much resource more than the requested can be used
    # to accomplish the rolling upgrade.
    #
    # By default, the number is 10, meaning 10% more of the resources we can allocate to roll out a new revision,
    # based on an existing revision. For example, the existing revision has 8 pods running, and we create a new
    # revision to replace it. During the transitional phase from the existing revision to this new revision, we
    # allow the total maximum number of pods to reach 8+Ceiling(8*10%)=9 pods. Each stage, we roll out 10% more,
    # adding one more pod to the new revision and reducing one pod of the existing revision.
    over-consumption-ratio: "10"
    # progressive-rollout-enabled is boolean value that determines whether progressive rollout feature is enabled or not.
    # The default value is true.
    progressive-rollout-enabled: "true"
    # stage-rollout-timeout-minutes contains the timeout value of minutes to use for each stage to accomplish in the
    # rollout process. If each stage is not accomplished during this timeout period, we will move on to the next stage,
    # by shifting more percentage of the traffic onto the new revision.
    # The default value is 2 minutes.
    stage-rollout-timeout-minutes: "2"
    # progressive-rollout-strategy determines the strategy to roll out the new revision progressively. There are two strategies available:
    # availability and resourceUtil. The availability strategy ensures the service availability is the top priority, and the service can
    # consume resources more than requested. The resourceUtil strategy ensures resource utilization is the top priority, and
    # the service will not consume resources more than requested. The default strategy is availability.
    progressive-rollout-strategy: "availability"
